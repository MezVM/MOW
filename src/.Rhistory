lines
rx <-  paste(":", id, sep='')
lines <- gsub(rx, "", lines);
lines
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
id = 10000
lines <- gsub("^Xref:", "", lines);
rx <-  paste("([ ].{1,24}:", as.character(id), sep='')
rx <-  paste(rx, ")", sep='')
lines <- stri_extract_last(lines, regex = rx)
lines <- gsub("[ ]","", lines);
rx <-  paste(":", id, sep='')
lines <- gsub(rx, "", lines);
lines
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
extract.field.of.application <- function(lines,id) {
lines <- extract.field.of.application.lines(lines);
if (lines.length > 0)
lines <- gsub("^Xref:", "", lines);
rx <-  paste("([ ].{1,24}:", as.character(id), sep='')
rx <-  paste(rx, ")", sep='')
lines <- stri_extract_last(lines, regex = rx)
lines <- gsub("[ ]","", lines);
rx <-  paste(":", id, sep='')
lines <- gsub(rx, "", lines);
if (lines.length <= 0)
lines <- gsub("^Newsgroups[ \t]*:[ \t]*", "", lines);
return(lines());
}
extract.field.of.application.lines <- function(lines) {
tmp <- grep("^Xref[ \t]*:", lines);
start <- tmp[1];
stop  <- NA;
for(i in (start+1):length(lines)) {
if(length(grep(":", lines[i])) > 0) {
stop <- i - 1;
break;
}
}
return( lines[start:stop] );
}
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
lines
lines.length
lines
lines[1]
lines[1].length
nchar(lines)
a=""
nchar(a)
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
Q
debugSource('D:/MOW/src/preprocess.R')
source('D:/MOW/src/data_preprocessing_report.R')
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
tmp
nchar(tmp)
nchar(tmp) == 0
nchar(tmp) == 1
nchar(tmp) == TRUE
tmp[1]
tmp[1]
is.na(tmp[1])
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
warnings()
source('preprocess.R');
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
}
{}
preprocess(data.in, data.out);
preprocess(data.in, data.out);
nchar(lines)
nchar(lines) > 0
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
source('D:/MOW/src/data_preprocessing_report.R')
source('preprocess.R');
preprocess(data.in, data.out);
preprocess(data.in, data.out);
source('preprocess.R');
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
source('preprocess.R');
source('preprocess.R');
source('preprocess.R');
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
lines <- grep("^Newsgroups[ \t]*:", lines);
lines <- gsub("^Newsgroups[ \t]*:[ \t]*", "", lines);
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
View(extract.information)
View(extract.information)
View(extract.field.of.application.lines.xref)
View(extract.information)
debugSource('D:/MOW/src/preprocess.R')
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('D:/MOW/src/data_preprocessing_report.R')
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
lines
lines
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
abstract.lines
lines
result
lines
lines
lines
lines
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
source('preprocess.R');
preprocess(data.in, data.out);
library(stringi)
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(cat.lines)
View(extract.information)
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
source('preprocess.R');
preprocess(data.in, data.out);
klasy = ["asd",'asd']
klasy = ["asd","asd"]
klasy = ["asd","asd"];
klasy = ("asd","asd");
klasy = c("asd","asd");
klasy
klasy = c("alt.atheism",
"comp.graphics",
"comp.os.ms-windows.misc",
"comp.sys.ibm.pc.hardware",
"comp.sys.mac.hardware",
"comp.windows.x",
"misc.forsale",
"rec.autos",
"rec.motorcycles",
"rec.sport.baseball",
"rec.sport.hockey",
"sci.crypt",
"sci.electronics",
"sci.med",
"sci.space",
"soc.religion.christian",
"talk.politics.guns",
"talk.politics.mideast",
"talk.politics.misc",
"talk.religion.misc");
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
library(stringi)
source('D:/MOW/src/nauka.R')
for (k in klasy) {
asd <- stri_extract_last(lines, regex = k)
}
for (k in klasy) {
asd <- stri_extract_last(lines, regex = k)
}
asd = c()
for (k in klasy) {
asd = c(asd,stri_extract_last(lines, regex = k));
}
asd
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
klasy
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
asd = NA;
for (k in klasy) {
asd = c(asd,stri_extract_last(lines, regex = k));
}
asd
asd = NA;
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
asd = NA;
for (k in klasy) {
asd = stri_extract_last(lines, regex = k);
if (!is.na(asd)){
break;
}
}
asd
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('D:/MOW/src/preprocess.R')
source('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
Q
source('preprocess.R');
preprocess(data.in, data.out);
source("bag_of_words.R")
install.packages("Rstem")
source("bag_of_words.R")
source("bag_of_words.R");
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'D:/MOW/tmp/df/';
dir.create(data.out, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
abstract.text
abstract.text
abstract.text
abstract.text
abstract.text
abstract.text
abstract
env
abstract.text
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
debugSource('D:/MOW/src/bag_of_words.R')
source("bag_of_words.R");
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'D:/MOW/tmp/df/';
dir.create(data.out, recursive=TRUE);
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
source("bag_of_words.R");
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
debugSource('D:/MOW/src/runMe.R')
install.packages("Rstem")
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in <- 'D:/MOW/tmp/data_preprocessed/';
file.create(str.join(data.out,"df.csv"))
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
sort(ls(envir=art.stats$words))
word.col.names
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
cats.col.names
meta.col.names
debugSource('D:/MOW/src/bag_of_words.R')
source("bag_of_words.R");
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
debugSource('D:/MOW/src/bag_of_words.R')
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
tmp
tmp
art$categories
art.env
source('D:/MOW/src/nauka.R')
