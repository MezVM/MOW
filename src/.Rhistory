str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('D:/MOW/src/data_preprocessing_report.R')
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
lines
lines
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
abstract.lines
lines
result
lines
lines
lines
lines
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
source('preprocess.R');
preprocess(data.in, data.out);
library(stringi)
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(extract.field.of.application.lines.xref)
View(cat.lines)
View(extract.information)
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
source('preprocess.R');
preprocess(data.in, data.out);
klasy = ["asd",'asd']
klasy = ["asd","asd"]
klasy = ["asd","asd"];
klasy = ("asd","asd");
klasy = c("asd","asd");
klasy
klasy = c("alt.atheism",
"comp.graphics",
"comp.os.ms-windows.misc",
"comp.sys.ibm.pc.hardware",
"comp.sys.mac.hardware",
"comp.windows.x",
"misc.forsale",
"rec.autos",
"rec.motorcycles",
"rec.sport.baseball",
"rec.sport.hockey",
"sci.crypt",
"sci.electronics",
"sci.med",
"sci.space",
"soc.religion.christian",
"talk.politics.guns",
"talk.politics.mideast",
"talk.politics.misc",
"talk.religion.misc");
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
library(stringi)
source('D:/MOW/src/nauka.R')
for (k in klasy) {
asd <- stri_extract_last(lines, regex = k)
}
for (k in klasy) {
asd <- stri_extract_last(lines, regex = k)
}
asd = c()
for (k in klasy) {
asd = c(asd,stri_extract_last(lines, regex = k));
}
asd
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
klasy
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
asd = NA;
for (k in klasy) {
asd = c(asd,stri_extract_last(lines, regex = k));
}
asd
asd = NA;
lines <- "Xref: cantaloupe.srv.cs.cmu.edu comp.archives.msdos.d:2258 comp.os.ms-windows.apps:12106 comp.os.ms-windows.misc:10000"
asd = NA;
for (k in klasy) {
asd = stri_extract_last(lines, regex = k);
if (!is.na(asd)){
break;
}
}
asd
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
source('D:/MOW/src/preprocess.R')
source('D:/MOW/src/preprocess.R')
source('preprocess.R');
preprocess(data.in, data.out);
source('preprocess.R');
preprocess(data.in, data.out);
debugSource('D:/MOW/src/preprocess.R')
preprocess(data.in, data.out);
Q
source('preprocess.R');
preprocess(data.in, data.out);
source("bag_of_words.R")
install.packages("Rstem")
source("bag_of_words.R")
source("bag_of_words.R");
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'D:/MOW/tmp/df/';
dir.create(data.out, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
abstract.text
abstract.text
abstract.text
abstract.text
abstract.text
abstract.text
abstract
env
abstract.text
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
debugSource('D:/MOW/src/bag_of_words.R')
source("bag_of_words.R");
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'D:/MOW/tmp/df/';
dir.create(data.out, recursive=TRUE);
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
source("bag_of_words.R");
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
debugSource('D:/MOW/src/runMe.R')
install.packages("Rstem")
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,data.out)
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in <- 'D:/MOW/tmp/data_preprocessed/';
file.create(str.join(data.out,"df.csv"))
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
sort(ls(envir=art.stats$words))
word.col.names
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
sort(ls(envir=art.stats$words))
cats.col.names
meta.col.names
debugSource('D:/MOW/src/bag_of_words.R')
source("bag_of_words.R");
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
debugSource('D:/MOW/src/bag_of_words.R')
debugSource('D:/MOW/src/bag_of_words.R')
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
tmp
tmp
art$categories
art.env
source('D:/MOW/src/nauka.R')
dir.create(data.out, recursive=TRUE);
file.create(str.join(data.out,"df.csv"))
source("bag_of_words.R");
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
install.packages("Rstem");
install.packages("Rstem")
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'D:/MOW/tmp/df/';
dir.create(data.out, recursive=TRUE);
file.create(str.join(data.out,"df.csv"))
source("bag_of_words.R");
create.articles.data.frame(data.in,str.join(data.out,"df.csv"))
org.data.directory <- 'D:/MOW/20_newsgroups/'
data.directory <- 'D:/MOW/tmp/';
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in  <- str.join(data.directory, 'data_original/');
data.out <- str.join(data.directory, 'data_preprocessed/');
dir.create(data.in, recursive=TRUE);
dir.create(data.out, recursive=TRUE);
cat('Kopiowanie plikow...\n');
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
flist  <- list.files(org.data.directory, recursive=TRUE, pattern='*', full.names=TRUE);
for(f in flist) {
cat(sprintf("Copy file %s\n", f));
new.name <- str.join(data.in, basename(f));
file.copy(f, new.name, overwrite=TRUE);
}
source('preprocess.R');
preprocess(data.in, data.out);
install.packages("Rstem");
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'C:/MOW/tmp/df/';
dir.create(data.out, recursive=TRUE);
file.create(str.join(data.out,"df2.csv"))
source("bag_of_words.R");
create.articles.data.frame(data.in,str.join(data.out,"df2.csv"))
read.table(str.join(data.out,"df2.csv"))
myTable <- read.table(str.join(data.out,"df2.csv"))
str.join <- function(a, b) {
return(paste(a, b, sep=''));
}
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'C:/MOW/tmp/df/';
myTable <- read.table(str.join(data.out,"df2.csv"))
View(myTable)
View(myTable)
myTable[1]
myTable[0]
myTable[1]
myTable[2]
myTable
myTable[1]
myTable[0]
myTable[[0]]
myTable[[1]]
myTable[[2]]
myTable[[3]]
myTable[[4]]
head(myTable,1)
myTable[1,]
myTable[2,]
myTable[3,]
myTable[1,1]
myTable[1,c(1,2)]
myTable[1,]
myTable[1,3]
as.numeric(myTable[1,])
as.character(myTable[1,])
as.character(myTable[1,])
as.numeric(myTable[1,])
as.numeric(myTable[2,])
as.numeric(myTable[1,1])
as.data.frame.list(myTable[1,])
as.number(myTable[1,])
as.numeric(myTable[1,])
as.numeric(myTable[2,])
as.numeric(myTable[3,])
debugSource('D:/MOW/src/data_strip.R')
min.n=20;
min.w=20;
source("data_strip.R")
lst <- vectorize.data(myTable, min.n,create.hash(c("c.OtherApplicationsNEC", "c.OtherSciencesNEC")),min.w);
debugSource('D:/MOW/src/data_strip.R')
lst <- vectorize.data(myTable, min.n,create.hash(c("c.OtherApplicationsNEC", "c.OtherSciencesNEC")),min.w);
cats.names
myTable <- read.table(str.join(data.out,data.df.name),header = TRUE)
data.df.name <- "df2.csv";
myTable <- read.table(str.join(data.out,data.df.name),header = TRUE)
save(df, file=str.join(data.out,data.df.name.bin), compress=FALSE);
data.df.name.bin <- "df2.bin";
save(df, file=str.join(data.out,data.df.name.bin), compress=FALSE);
save(myTable, file=str.join(data.out,data.df.name.bin), compress=FALSE);
min.n=20;
min.w=20;
source("data_strip.R")
lst <- vectorize.data(myTable, min.n,create.hash(c("c.OtherApplicationsNEC", "c.OtherSciencesNEC")),min.w);
lst$data
lst$data[1]
View(myTable)
debugSource('D:/MOW/src/data_strip.R')
lst <- vectorize.data(myTable, min.n,create.hash(c("c.OtherApplicationsNEC", "c.OtherSciencesNEC")),min.w);
cats.names
cats.indexes
ncol(text.data.frame)
logical( ncol(text.data.frame) )
result       <- logical( ncol(text.data.frame) );
for(i in 1:ncol(text.data.frame)) {
column.name <- column.names[i];
if(is.column.name(column.name) && !is.invalid(column.name, invalid.cats.hash)) {
number.of.arts <- text.data.frame[1, i];
if(number.of.arts >= min.n) {
result[i] = TRUE;
}
}
}
lst <- vectorize.data(myTable, min.n,create.hash(c("c.OtherApplicationsNEC", "c.OtherSciencesNEC")),min.w);
invalid.cats.hash
is.column.name(column.name)
length( grep('^c\\.', column.name) )
grep('^c\\.', column.name)
lst <- vectorize.data(myTable, min.n,create.hash(c("c.OtherApplicationsNEC", "c.OtherSciencesNEC")),min.w);
lst <- vectorize.data(df = myTable, min.n = min.n, min.w = min.w);
lst <- vectorize.data(df = myTable, min.n = min.n, min.w = min.w);
debugSource('D:/MOW/src/data_strip.R')
debugSource('D:/MOW/src/data_strip.R')
debugSource('D:/MOW/src/data_strip.R')
lst <- vectorize.data(df = myTable, min.n = min.n, min.w = min.w);
text.data.frame[1, i];
allow.in.data
cats.indexes
length(cats.indexes)
allow.in.data[ci]
df[i, ci]
df[i, ci]
cats.vector
df[c(2,3,4), cats.indexes]
df[i, ci]
df[i, 35407]
df[i, ci]
debugSource('D:/MOW/src/data_strip.R')
lst <- vectorize.data(df = myTable, min.n = min.n, min.w = min.w);
min.w
df[rows.vector,wi]
sum(df[rows.vector,wi])
rows.vector
words.count[1:20]
words.count[1:40]
(1:max.words.index)
(1:max.words.index)[words.count >= min.w]
words
allow.in.data
which(allow.in.data == TRUE)
lenght(which(allow.in.data == TRUE))
length(which(allow.in.data == TRUE))
rows.vector
words
cats.vector
rows.vector
factor(cats.vector)
df[rows.vector,used.columns]
words
debugSource('D:/MOW/src/data_strip.R')
lst <- vectorize.data(df = myTable, min.n = min.n, min.w = min.w);
summary(lst$optimalized.df)
lst$optimalized.df[1]
lst$optimalized.df[1,(3000:3071)]
lst$optimalized.df
lst$data
lst$optimalized.df
lst$optimalized.df[1,]
lst$optimalized.df[1,]
lst$data[1,]
as.vector(lst$optimalized.df[1,])
as.vector(lst$optimalized.df[2,])
lst$optimalized.df[1,3071]
lst$optimalized.df[1,3072]
lst$optimalized.df[1,3100]
lst$optimalized.df[1,"c.talk.politics.misc"]
lst$optimalized.df[1,"c.comp.os.ms.windows.misc"]
lst$data[1,"c.comp.os.ms.windows.misc"]
as.vector(lst$optimalized.df[1,])
as.vector(lst$optimalized.df[1])
as.vector(lst$optimalized.df[1])[1:10]
asd= as.vector(lst$optimalized.df[1])
asd
asd[1]
asd[[1]]
asd[[2]]
ncol(lst$optimalized.df)
ncol(lst$data)
data.df.name.opt <- "df2opt.bin";
save(optimalised.df, file=str.join(data.out,data.df.name.bin), compress=FALSE);
optimalised.df <- vectorize.data(df = myTable, min.n = min.n, min.w = min.w);
save(optimalised.df, file=str.join(data.out,data.df.name.bin), compress=FALSE);
save(myTable, file=str.join(data.out,data.df.name.bin), compress=FALSE);
save(optimalised.df, file=str.join(data.out,data.df.name.opt), compress=FALSE);
data.in <- 'D:/MOW/tmp/data_preprocessed/';
data.out <- 'C:/MOW/tmp/df/';
data.df.name <- "df2.csv";
data.df.name.bin <- "df2.bin";
data.df.name.opt <- "df2opt.bin";
